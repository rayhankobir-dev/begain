generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  questions      Question[]
  answers        Answer[]
  comments       Comment[]
  votes          Vote[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Question {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  content        String
  tags           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       String   @db.ObjectId

  answers        Answer[]
  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Answer {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  questionId     String    @db.ObjectId
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       String    @db.ObjectId
  comments       Comment[]
  votes          Vote[]

  user            User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question       Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Comment {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  answerId       String    @db.ObjectId
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       String    @db.ObjectId
  user           User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answer         Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade)
}

model Vote {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  answerId       String    @db.ObjectId
  vote           String    
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       String    @db.ObjectId
  answer         Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  @@unique([authorId, answerId])
}